{
	"info": {
		"_postman_id": "2ebe242a-470e-4a65-a950-df7e44974923",
		"name": "store",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33498322"
	},
	"item": [
		{
			"name": "Products",
			"item": [
				{
					"name": "Create product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"productName\", pm.variables.replaceIn('{{$randomProduct}}'));\r",
									"pm.collectionVariables.set(\"productPrice\", pm.variables.replaceIn('{{$randomPrice}}'));\r",
									"pm.collectionVariables.set(\"productSku\", pm.variables.replaceIn('{{$randomInt}}'));\r",
									"pm.collectionVariables.set(\"productDescription\", pm.variables.replaceIn('{{$randomLoremSentence}}'));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": { \"type\": \"integer\" },\r",
									"    \"name\": { \"type\": \"string\" },\r",
									"    \"price\": { \"type\": \"string\" },\r",
									"    \"sku\": { \"type\": \"string\" },\r",
									"    \"description\": { \"type\": \"string\" },\r",
									"  },\r",
									"  \"required\": [\"id\", \"name\", \"price\", \"sku\", \"description\"]\r",
									"};\r",
									"\r",
									"pm.test(\"JSON Schema is valid\", function () {\r",
									"    pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    \r",
									"    pm.collectionVariables.set(\"productId\", pm.response.json().id);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate response against saved 'productId' value\", function() {\r",
									"    var responseBody = pm.response.json();\r",
									"\r",
									"    var savedProductName = pm.collectionVariables.get(\"productName\");\r",
									"    var responseProductName = responseBody.name;\r",
									"    var savedProductPrice = pm.collectionVariables.get(\"productPrice\");\r",
									"    var responseProductPrice = responseBody.price;\r",
									"    var savedProductSku = pm.collectionVariables.get(\"productSku\");\r",
									"    var responseProductSku = responseBody.sku;\r",
									"    var savedProductDescription = pm.collectionVariables.get(\"productDescription\");\r",
									"    var responseProductDescription = responseBody.description;\r",
									"\r",
									"    pm.expect(responseProductName).to.equal(savedProductName);\r",
									"    pm.expect(responseProductPrice).to.equal(savedProductPrice);\r",
									"    pm.expect(responseProductSku).to.equal(savedProductSku);\r",
									"    pm.expect(responseProductDescription).to.equal(savedProductDescription);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{productName}}\",\r\n    \"price\": \"{{productPrice}}\",\r\n    \"sku\": \"{{productSku}}\",\r\n    \"description\": \"{{productDescription}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": [
						{
							"name": "Valid data",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"orange\",\r\n    \"price\": 8,\r\n    \"sku\": 123321123,\r\n    \"description\": \"wouh\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/products",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"products"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Get product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate response against saved 'productId' value\", () => {\r",
									"    const responseBody = pm.response.json();\r",
									"    var savedProductName = pm.collectionVariables.get(\"productName\");\r",
									"    var responseProductName = responseBody.name;\r",
									"    var savedProductPrice = pm.collectionVariables.get(\"productPrice\");\r",
									"    var responseProductPrice = responseBody.price;\r",
									"    var savedProductSku = pm.collectionVariables.get(\"productSku\");\r",
									"    var responseProductSku = responseBody.sku;\r",
									"    var savedProductDescription = pm.collectionVariables.get(\"productDescription\");\r",
									"    var responseProductDescription = responseBody.description;\r",
									"    var savedProductId = pm.collectionVariables.get(\"productId\");\r",
									"    var responseProductId = responseBody.id;\r",
									"\r",
									"    pm.expect(responseProductName).to.equal(savedProductName);\r",
									"    pm.expect(responseProductPrice).to.equal(savedProductPrice);\r",
									"    pm.expect(responseProductSku).to.equal(savedProductSku);\r",
									"    pm.expect(responseProductDescription).to.equal(savedProductDescription);\r",
									"    pm.expect(responseProductId).to.equal(savedProductId);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{productId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"productName\", pm.variables.replaceIn('{{$randomProduct}}'));\r",
									"pm.collectionVariables.set(\"productPrice\", pm.variables.replaceIn('{{$randomPrice}}'));\r",
									"pm.collectionVariables.set(\"productSku\", pm.variables.replaceIn('{{$randomInt}}'));\r",
									"pm.collectionVariables.set(\"productDescription\", pm.variables.replaceIn('{{$randomLoremSentence}}'));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate response against saved 'productId' value\", () => {\r",
									"    const responseBody = pm.response.json();\r",
									"    var savedProductName = pm.collectionVariables.get(\"productName\");\r",
									"    var responseProductName = responseBody.name;\r",
									"    var savedProductPrice = pm.collectionVariables.get(\"productPrice\");\r",
									"    var responseProductPrice = responseBody.price;\r",
									"    var savedProductSku = pm.collectionVariables.get(\"productSku\");\r",
									"    var responseProductSku = responseBody.sku;\r",
									"    var savedProductDescription = pm.collectionVariables.get(\"productDescription\");\r",
									"    var responseProductDescription = responseBody.description;\r",
									"    var savedProductId = pm.collectionVariables.get(\"productId\");\r",
									"    var responseProductId = responseBody.id;\r",
									"\r",
									"    pm.expect(responseProductName).to.equal(savedProductName);\r",
									"    pm.expect(responseProductPrice).to.equal(savedProductPrice);\r",
									"    pm.expect(responseProductSku).to.equal(savedProductSku);\r",
									"    pm.expect(responseProductDescription).to.equal(savedProductDescription);\r",
									"    pm.expect(responseProductId).to.equal(savedProductId);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": {{productId}},\r\n    \"name\": \"{{productName}}\",\r\n    \"price\": \"{{productPrice}}\",\r\n    \"sku\": \"{{productSku}}\",\r\n    \"description\": \"{{productDescription}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove product by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Validate response against saved 'productId' value\", () => {\r",
									"    const responseBody = pm.response.json();\r",
									"    var savedProductName = pm.collectionVariables.get(\"productName\");\r",
									"    var responseProductName = responseBody.name;\r",
									"    var savedProductPrice = pm.collectionVariables.get(\"productPrice\");\r",
									"    var responseProductPrice = responseBody.price;\r",
									"    var savedProductSku = pm.collectionVariables.get(\"productSku\");\r",
									"    var responseProductSku = responseBody.sku;\r",
									"    var savedProductDescription = pm.collectionVariables.get(\"productDescription\");\r",
									"    var responseProductDescription = responseBody.description;\r",
									"    var savedProductId = pm.collectionVariables.get(\"productId\");\r",
									"    var responseProductId = responseBody.id;\r",
									"\r",
									"    pm.expect(responseProductName).to.equal(savedProductName);\r",
									"    pm.expect(responseProductPrice).to.equal(savedProductPrice);\r",
									"    pm.expect(responseProductSku).to.equal(savedProductSku);\r",
									"    pm.expect(responseProductDescription).to.equal(savedProductDescription);\r",
									"    pm.expect(responseProductId).to.equal(savedProductId);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products/{{productId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get deleted product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404); \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products/{{productId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products",
								"{{productId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List products - pagination test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Number of objects on the page is correct\", function () {",
									"",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody.length).to.eql(parseInt(pm.collectionVariables.get(\"pageSize\")));",
									"",
									"});",
									"",
									"",
									"function getSortDirectionString(arr) {",
									"    const c = [];",
									"    for (let i = 1; i < arr.length; i++) {",
									"      c.push(arr[i - 1].localeCompare(arr[i]));",
									"    }",
									"  ",
									"    if (c.every((n) => n <= 0)) return 'ascending';",
									"    if (c.every((n) => n >= 0)) return 'descending';",
									"  ",
									"    return 'unsorted';",
									"  }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?page=1&pageSize={{pageSize}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "pageSize",
									"value": "{{pageSize}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List products - sorting test",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Fixed TypeError by adding a null check before calling localeCompare",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Sorting by Name in ASC order is applied correctly\", function () {",
									"",
									"    var responseBody = pm.response.json();",
									"    ",
									"    var names = new Array()",
									"    for (var element of responseBody){",
									"        names.push(element.name)",
									"    }",
									"    pm.expect(getSortDirectionString(names)).to.eq('ascending')",
									"    ",
									"",
									"});",
									"",
									"",
									"function getSortDirectionString(arr) {",
									"    const c = [];",
									"    for (let i = 1; i < arr.length; i++) {",
									"      c.push(arr[i - 1].localeCompare(arr[i]));",
									"    }",
									"  ",
									"    if (c.every((n) => n <= 0)) return 'ascending';",
									"    if (c.every((n) => n >= 0)) return 'descending';",
									"  ",
									"    return 'unsorted';",
									"  }"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/products?sortOrder=ASC&sortKey=name",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							],
							"query": [
								{
									"key": "sortOrder",
									"value": "ASC"
								},
								{
									"key": "sortKey",
									"value": "name"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create product - missing name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"price\": \"{{productPrice}}\",\r\n    \"sku\": \"{{productSku}}\",\r\n    \"description\": \"{{productDescription}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create product - price as String",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{productName}}\",\r\n    \"price\": \"abc\",\r\n    \"sku\": \"{{productSku}}\",\r\n    \"description\": \"{{productDescription}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"products"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Orders",
			"item": [
				{
					"name": "List orders",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create order",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update order",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 4,\r\n    \"name\": \"order5\",\r\n    \"sku\": 123425445656765\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove order by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/4",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								"4"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "List users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user by ID",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/3",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Dream\",\r\n    \"lastName\": \"Real\",\r\n    \"email\": \"dream.real@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update user",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"Ilon\",\r\n    \"lastName\": \"Mask\",\r\n    \"email\": \"ilon.mask@gmail.com\",\r\n    \"dateOfBirth\": \"2001-10-99\",\r\n    \"emailVerified\": true,\r\n    \"signUpDate\": \"2019-08-24\",\r\n    \"status\": \"active\",\r\n    \"level\": \"lord\",\r\n    \"id\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove user by ID",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"10"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "productName",
			"value": ""
		},
		{
			"key": "productId",
			"value": ""
		},
		{
			"key": "productPrice",
			"value": ""
		},
		{
			"key": "productSku",
			"value": ""
		},
		{
			"key": "productDescription",
			"value": ""
		},
		{
			"key": "pageSize",
			"value": "2"
		}
	]
}